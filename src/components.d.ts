/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
export namespace Components {
  interface SrButton {
    size: string;
    variant: string;
  }
  interface SrFlex {
    direction:
      | 'horizontal'
      | 'vertical'
      | 'horizontal-reverse'
      | 'vertical-reverse';
    gap: number;
    hAlignment: 'left' | 'center' | 'right' | 'around' | 'between';
    vAlignment: 'top' | 'center' | 'bottom' | 'stretch';
    wrap: boolean;
  }
  interface SrHeader {
    /**
     * The `level` property allows users to indicate what header hierarchy this element is. It must take a number from `1` to `2`.
     */
    level: 1 | 2;
    /**
     * Provides support for implementing horizontal alignment to the text contained in the header.
     */
    textAlign: 'left' | 'right' | 'center' | 'justify';
  }
  interface SrList {
    ordered: boolean;
  }
  interface SrListItem {}
  interface SrParagraph {}
}
export interface SrButtonCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLSrButtonElement;
}
declare global {
  interface HTMLSrButtonElement
    extends Components.SrButton,
      HTMLStencilElement {}
  var HTMLSrButtonElement: {
    prototype: HTMLSrButtonElement;
    new (): HTMLSrButtonElement;
  };
  interface HTMLSrFlexElement extends Components.SrFlex, HTMLStencilElement {}
  var HTMLSrFlexElement: {
    prototype: HTMLSrFlexElement;
    new (): HTMLSrFlexElement;
  };
  interface HTMLSrHeaderElement
    extends Components.SrHeader,
      HTMLStencilElement {}
  var HTMLSrHeaderElement: {
    prototype: HTMLSrHeaderElement;
    new (): HTMLSrHeaderElement;
  };
  interface HTMLSrListElement extends Components.SrList, HTMLStencilElement {}
  var HTMLSrListElement: {
    prototype: HTMLSrListElement;
    new (): HTMLSrListElement;
  };
  interface HTMLSrListItemElement
    extends Components.SrListItem,
      HTMLStencilElement {}
  var HTMLSrListItemElement: {
    prototype: HTMLSrListItemElement;
    new (): HTMLSrListItemElement;
  };
  interface HTMLSrParagraphElement
    extends Components.SrParagraph,
      HTMLStencilElement {}
  var HTMLSrParagraphElement: {
    prototype: HTMLSrParagraphElement;
    new (): HTMLSrParagraphElement;
  };
  interface HTMLElementTagNameMap {
    'sr-button': HTMLSrButtonElement;
    'sr-flex': HTMLSrFlexElement;
    'sr-header': HTMLSrHeaderElement;
    'sr-list': HTMLSrListElement;
    'sr-list-item': HTMLSrListItemElement;
    'sr-paragraph': HTMLSrParagraphElement;
  }
}
declare namespace LocalJSX {
  interface SrButton {
    onClicked?: (event: SrButtonCustomEvent<any>) => void;
    size?: string;
    variant?: string;
  }
  interface SrFlex {
    direction?:
      | 'horizontal'
      | 'vertical'
      | 'horizontal-reverse'
      | 'vertical-reverse';
    gap?: number;
    hAlignment?: 'left' | 'center' | 'right' | 'around' | 'between';
    vAlignment?: 'top' | 'center' | 'bottom' | 'stretch';
    wrap?: boolean;
  }
  interface SrHeader {
    /**
     * The `level` property allows users to indicate what header hierarchy this element is. It must take a number from `1` to `2`.
     */
    level?: 1 | 2;
    /**
     * Provides support for implementing horizontal alignment to the text contained in the header.
     */
    textAlign?: 'left' | 'right' | 'center' | 'justify';
  }
  interface SrList {
    ordered?: boolean;
  }
  interface SrListItem {}
  interface SrParagraph {}
  interface IntrinsicElements {
    'sr-button': SrButton;
    'sr-flex': SrFlex;
    'sr-header': SrHeader;
    'sr-list': SrList;
    'sr-list-item': SrListItem;
    'sr-paragraph': SrParagraph;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'sr-button': LocalJSX.SrButton &
        JSXBase.HTMLAttributes<HTMLSrButtonElement>;
      'sr-flex': LocalJSX.SrFlex & JSXBase.HTMLAttributes<HTMLSrFlexElement>;
      'sr-header': LocalJSX.SrHeader &
        JSXBase.HTMLAttributes<HTMLSrHeaderElement>;
      'sr-list': LocalJSX.SrList & JSXBase.HTMLAttributes<HTMLSrListElement>;
      'sr-list-item': LocalJSX.SrListItem &
        JSXBase.HTMLAttributes<HTMLSrListItemElement>;
      'sr-paragraph': LocalJSX.SrParagraph &
        JSXBase.HTMLAttributes<HTMLSrParagraphElement>;
    }
  }
}
